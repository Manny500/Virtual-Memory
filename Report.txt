Report:

A short introduction to the problem you are trying to solve.

	The

A description of the how each of the page replacement  methods work, including your hybrid one.

	
	The FIFO algorithm is pretty simple. It checks to see if any frames are open in the page, if there is an open frame then it will assign it a process. If all frames are full, the algorithm will go through all the processes and check their allocation time. Once it finds the process that was allocated the earliest, it replaces that process with the new one. 


	The HYBRID is a modification to the FIFO and the LRU algorithms. It checks to see if any frames are open in the page, if there is an open frame then it will assign it a process. Each time a process is allocated or referenced its reference bit is set to one. If all the frames are full, the algorithm will check the reference bit of each process one by one in order, it checks for a process with the reference bit set to zero. When the algorithm points to a process it checks it reference bit, if it is one, it sets the bit to zero and moves on. If the reference bit is zero it replaces that process with the new one. The algorithm always keeps track of where the pointer last pointed to and starts there the next time that it needed. The movement of the pointer is kind of like a clock. 

A description of your code design and your choice of data structures.

	Our program utilizes four major Java classes in order to accomplish the task at hand. The titles of the classes are as follows: the PROCESS object class, the main VIRTUAL-MEMORY-MANAGER class, the PARSE class, and the ALGORITHMS class. The process class is used to create different processes/tasks. We decided to make the processes objects, it is easier to assign and obtain information from the processes that way. The parsing class is used to handle any incoming files containing processes; it stores and creates the new processes in a database. To store the processes (our database) we choose to use ArrayList because of its flexibility and dynamic expansion and contraction. The algorithm class is where all the different scheduling algorithms are coded and called from. This helps organize all the scheduling algorithms in one place. Lastly the scheduler class acts as our main and using the other classes it runs the algorithmsâ€™ analysis. *Note: Each scheduling algorithm should be run separately in order to avoid any mistakes, since the process from the database are constantly being changed.

Correctness Results - In this section you should present the results for each replacement algorithm in the following way:

	Use the setting that has the minimum amount of physical pages (so replacements will happen more often)

	Show a small input file (around 15 memory accesses).

	Manually draw a diagram (like in the HW solutions) which show the page replacements.

	Manually calculate the number of page faults and disk accesses.

	Show the output of your algorithm to ensure correctness.


	FIFO: (512B page size)

		101  102  103  104  101  102  105  101  102  103  104  105  102  103  104 
		 R    R    R    R    W    R    R    R    R    R    R    R    R    W    R

		101  101  101  101  101  101  1O5  105  105  105  104  104  104  104  104
		 x   102  102  102  102  102  102  101  101  101  101  105  105  105  105
		 x    x   103  103  103  103  103  103  102  102  102  102  102  102  102
		 x    x    x   104  104  104  104  104  104  103  103  103  103  103  103
   
   		 FD   FD   FD   FD   D         FD   FD   FD   FD   FD   FD        D    =	# of page faults   = 10
												# of disk accesses = 12

	HYBRID:(512B page size)

		101  102  103  104  101  102  105  101  102  103  104  105  102  103  104 
		 R    R    R    R    W    R    R    R    R    R    R    R    R    W    R

		101  101  101  101  101  101  1O5  105  105  105  104  104  104  104  104
		 x   102  102  102  102  102  102  101  101  101  101  105  105  105  105
		 x    x   103  103  103  103  103  103  102  102  102  102  102  102  102
		 x    x    x   104  104  104  104  104  104  103  103  103  103  103  103
   
   		 FD   FD   FD   FD   D         FD   FD   FD   FD   FD   FD        D    =	# of page faults   = 10
												# of disk accesses = 12
	
	OPRA:

	LRU:

	SCA:

	ESCA:

Analysis Results - Using a larger input file (), show a table which compares the results of all different page replacement algorithms.  When generating larger files try to be thoughtful of how you generate them (perhaps use the ideas of working sets).

Conclusion - Which algorithms worked the best and in what cases.

An appendix describing which part of the project each team member was in charge of.

	Manny - Skeleton of the program/design
	Manny - FIFO and HYBRID scheduling algorithms, code and report analysis
	Manny - Analysis Results
	Manny - Conclusion

	Conrad - OPRA, LRU, SCA, and ESCA scheduling algorithms, code and report analysis
	Conrad - Complete and in depth description of how each algorithm works
	Conrad - Introduction

References - If necessary.
