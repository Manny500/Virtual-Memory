Report:

A short introduction to the problem you are trying to solve.

	The objective for this project is to see which page replacement algorithm will achieve a result closest to the optimal page replacement algorithm. The algorithms being compared are optimal, first in first out (FIFO), second chance (SCA), enhanced second chance (ESCA), and a hybrid algorithm (HYBRID). The description for each of these algorithms can be found below. In order to assess the validity of our results it was necessary to ensure that we coded these algorithms correctly. To check this we manually calculated the results for a total of 15 pages using each algorithm and compared them to the outputs from our programs. Then once it was confirmed that they functioned correctly, we used a larger input file to see how each algorithm would compare to each other on a more significant scale. The two input files are included with this report, Small-Input-Processess.txt and Large-Input-Processess.txt. The Large-Input-Processess.txt was generated randomly, but with locality in mind meaning that the numbers are random but within certain ranges.

A description of the how each of the page replacement  methods work, including your hybrid one.

	The OPRA or optimal page replacement algorithm is the absolute best case scenario for a page replacement algorithm, and is used to compare with other processes to see how close to the optimal result they can achieve. The reason OPRA is the best, and will always be the best it because it makes use of information that would not normally be available to a page replacement algorithm; the future. When a new page comes in that causes a frame to be replaced, this algorithm will check the frames and see how long it will be until one of them will be used again, if at all. The one with the longest time until it gets used again will then be replaced, with a process that will never be used again having the longest time. This makes it optimal because if pages are replaced as few times as possible then the program will run as fast as possible. Unfortunately real machines cannot predict the future, so algorithms like the next few mentioned must be used instead.
	
	The FIFO algorithm is pretty simple. It checks to see if any frames are open in the page, if there is an open frame then it will assign it a process. If all frames are full, the algorithm will go through all the processes and check their allocation time. Once it finds the process that was allocated the earliest, it replaces that process with the new one. 

	The SCA or second chance algorithm that uses a reference bit to give a process a second chance before being replaced if it has been referenced recently. The way it works is that when a new process comes into memory the algorithm first checks to see if there are any open spaces, if not then it will cycle through the list of frames in a round robin fashion. If the frame has a reference bit set to 1, then it will be changed to 0 and the next frame will be examined. If the bit is set to 0 when it gets checked then that frame will be the one that is replaced. The way a reference bit gets set to 1 is if it is already in memory and that frame gets used again, either for a read or a write, meaning that it was a hit. The reference bit is initially set to 0 when the page is first stored in the frame. This type of algorithm is widely used because it assumes that if a page is used more than once then it's likely to be used again, which does happen quite frequently in real systems.
	
	The ESCA or enhanced second chance algorithm is much like the second chance algorithm with the addition of a second bit for modification. The modification bit gets set to 1 when the page is written to, and once that bit has been set then it will stay at 1 for the remainder of the time that it is in the frame. When it's time to replace a frame, the algorithm will cycle through the frames and check both the reference and modification bit in a few stages. The first cycle will check if any of the frames are (0,0), if so then the first one it gets to will be replaced. If there are no frames set to (0,0) then it will look for (0,1). If a frame still hasn't been replaced by this point then the reference bits are changed to 0 and the cycle is repeated. This will change (1,0) and (1,1) to (0,0) and (0,1) respectively. The reason this kind of algorithm is used is because it takes the hardware into consideration and replaces the pages that will be easiest and fastest.
		These are the possible bit combinations:
	(0, 0) - neither recently used nor modified - best page to replace.
	(0, 1) - not recently used but modified - not as good because we need to swap out a page, but still better than used pages.
	(1, 0) - recently used but unmodified.
	(1, 1) - recently used and modified - the worst page to replace.

	The HYBRID is a modification to the FIFO and the LRU algorithms. It checks to see if any frames are open in the page, if there is an open frame then it will assign it a process. Each time a process is allocated or referenced its reference bit is set to one. If all the frames are full, the algorithm will check the reference bit of each process one by one in order, it checks for a process with the reference bit set to zero. When the algorithm points to a process it checks it reference bit, if it is one, it sets the bit to zero and moves on. If the reference bit is zero it replaces that process with the new one. It does not have a pointer keeping track of the last frame it replaced. It starts looking at frame zero each time.

A description of your code design and your choice of data structures.

	Our program utilizes four major Java classes in order to accomplish the task at hand. The titles of the classes are as follows: the PROCESS object class, the main VIRTUAL-MEMORY-MANAGER class, the PARSE class, and the ALGORITHMS class. The process class is used to create different processes/tasks. We decided to make the processes objects, it is easier to assign and obtain information from the processes that way. The parsing class is used to handle any incoming files containing processes; it stores and creates the new processes in a database. To store the processes (our database) we choose to use ArrayList because of its flexibility and dynamic expansion and contraction. The algorithm class is where all the different scheduling algorithms are coded and called from. This helps organize all the scheduling algorithms in one place. Lastly the scheduler class acts as our main and using the other classes it runs the algorithmsâ€™ analysis. *Note: Each scheduling algorithm should be run separately in order to avoid any mistakes, since the process from the database are constantly being changed.

Correctness Results - In this section you should present the results for each replacement algorithm in the following way:

	Use the setting that has the minimum amount of physical pages (so replacements will happen more often)

	Show a small input file (around 15 memory accesses).

	Manually draw a diagram (like in the HW solutions) which show the page replacements.

	Manually calculate the number of page faults and disk accesses.

	Show the output of your algorithm to ensure correctness.


	FIFO: (512B page size)

		101  102  103  104  101  102  105  101  102  103  104  105  102  103  104 
		 R    R    R    R    W    R    R    R    R    R    R    R    R    W    R

		101  101  101  101  101  101  1O5  105  105  105  104  104  104  104  104
		 x   102  102  102  102  102  102  101  101  101  101  105  105  105  105
		 x    x   103  103  103  103  103  103  102  102  102  102  102  102  102
		 x    x    x   104  104  104  104  104  104  103  103  103  103  103  103
   
   		 FD   FD   FD   FD   D         FD   FD   FD   FD   FD   FD        D    =	# of page faults   = 10
												# of disk accesses = 12

		Output:
				
			loaded page #1 of processes #101 to frame #0 with no replacement.
     				Virtual Address: 512 -> Physical Address: 0
			loaded page #1 of processes #102 to frame #1 with no replacement.
				Virtual Address: 512 -> Physical Address: 512
			loaded page #1 of processes #103 to frame #2 with no replacement.
     				Virtual Address: 512 -> Physical Address: 1024
			loaded page #1 of processes #104 to frame #3 with no replacement.
     				Virtual Address: 512 -> Physical Address: 1536
     				Needed to write frame #0 to memory
			no page fault. accessed frame #0
     				Virtual Address: 513 -> Physical Address: 1
			no page fault. accessed frame #1
     				Virtual Address: 513 -> Physical Address: 513
			loaded page #1 of processes #105 to frame #0 with replacement.
     				Virtual Address: 513 -> Physical Address: 1
			loaded page #1 of processes #101 to frame #1 with replacement.
     				Virtual Address: 514 -> Physical Address: 514
			loaded page #1 of processes #102 to frame #2 with replacement.
     				Virtual Address: 514 -> Physical Address: 1026
			loaded page #1 of processes #103 to frame #3 with replacement.
     				Virtual Address: 514 -> Physical Address: 1538
			loaded page #1 of processes #104 to frame #0 with replacement.
     				Virtual Address: 514 -> Physical Address: 2
			loaded page #1 of processes #105 to frame #1 with replacement.
     				Virtual Address: 515 -> Physical Address: 515
			no page fault. accessed frame #2
     				Virtual Address: 515 -> Physical Address: 1027
     				Needed to write frame #3 to memory
			no page fault. accessed frame #3
     				Virtual Address: 515 -> Physical Address: 1539
			no page fault. accessed frame #0
     				Virtual Address: 516 -> Physical Address: 0
			Number of page faults: 10. Number of memory accesses: 12
			
	HYBRID:(512B page size)

		101  102  103  104  101  102  105  101  102  103  104  105  102  103  104 
		 R    R    R    R    W    R    R    R    R    R    R    R    R    W    R

		101  101  101  101  101  101  1O5  105  102  102  102  105  105  105  105
		 x   102  102  102  102  102  102  101  101  101  101  101  102  102  102
		 x    x   103  103  103  103  103  103  103  103  103  103  103  103  103
		 x    x    x   104  104  104  104  104  104  104  104  104  104  104  104
   
   		 FD   FD   FD   FD   D         FD   FD   FD             FD   FD    D    =	# of page faults   = 9
												# of disk accesses = 11
			
		Output:

			loaded page #1 of processes #101 to frame #0 with no replacement.
     				Virtual Address: 512 -> Physical Address: 0
			loaded page #1 of processes #102 to frame #1 with no replacement.
     				Virtual Address: 512 -> Physical Address: 512
			loaded page #1 of processes #103 to frame #2 with no replacement.
     				Virtual Address: 512 -> Physical Address: 1024
			loaded page #1 of processes #104 to frame #3 with no replacement.
     				Virtual Address: 512 -> Physical Address: 1536
     				Needed to write frame #0 to memory
			no page fault. accessed frame #0
     				Virtual Address: 513 -> Physical Address: 1
			no page fault. accessed frame #1
     				Virtual Address: 513 -> Physical Address: 513
			loaded page #1 of processes #105 to frame #0 with replacement.
     				Virtual Address: 513 -> Physical Address: 1
			loaded page #1 of processes #101 to frame #1 with replacement.
     				Virtual Address: 514 -> Physical Address: 514
			loaded page #1 of processes #102 to frame #0 with replacement.
     				Virtual Address: 514 -> Physical Address: 2
			no page fault. accessed frame #2
     				Virtual Address: 514 -> Physical Address: 1026
			no page fault. accessed frame #3
     				Virtual Address: 514 -> Physical Address: 1538
			loaded page #1 of processes #105 to frame #0 with replacement.
     				Virtual Address: 515 -> Physical Address: 3
			loaded page #1 of processes #102 to frame #1 with replacement.
     				Virtual Address: 515 -> Physical Address: 515
     				Needed to write frame #2 to memory
			no page fault. accessed frame #2
     				Virtual Address: 515 -> Physical Address: 1027
			no page fault. accessed frame #3
     				Virtual Address: 516 -> Physical Address: 1536
			Number of page faults: 9. Number of memory accesses: 11

	OPRA:(512B page size)

		101  102  103  104  101  102  105  101  102  103  104  105  102  103  104 
		 R    R    R    R    W    R    R    R    R    R    R    R    R    W    R

		101  101  101  101  101  101  1O1  101  101  101  104  104  104  104  104
		 x   102  102  102  102  102  102  102  102  102  102  102  102  102  102
		 x    x   103  103  103  103  103  103  103  103  103  103  103  103  103
		 x    x    x   104  104  104  105  105  105  105  105  105  105  105  105
   
   		 FD   FD   FD   FD   D         FD                  FD             D    	=	# of page faults   = 6
													# of disk accesses = 8
		
		Output:

			loaded page #1 of processes #101 to frame #0 with no replacement.
     				Virtual Address: 512 -> Physical Address: 0
			loaded page #1 of processes #102 to frame #1 with no replacement.
     				Virtual Address: 512 -> Physical Address: 512
			loaded page #1 of processes #103 to frame #2 with no replacement.
     				Virtual Address: 512 -> Physical Address: 1024
			loaded page #1 of processes #104 to frame #3 with no replacement.
     				Virtual Address: 512 -> Physical Address: 1536
     				Needed to write frame #0 to memory
			no page fault. accessed frame #0
     				Virtual Address: 513 -> Physical Address: 1
			no page fault. accessed frame #1
     				Virtual Address: 513 -> Physical Address: 513
			loaded page #1 of processes #105 to frame #3 with replacement.
     				Virtual Address: 513 -> Physical Address: 1537
			no page fault. accessed frame #0
     				Virtual Address: 514 -> Physical Address: 2
			no page fault. accessed frame #1
     				Virtual Address: 514 -> Physical Address: 514
			no page fault. accessed frame #2
     				Virtual Address: 514 -> Physical Address: 1026
			loaded page #1 of processes #104 to frame #0 with replacement.
     				Virtual Address: 514 -> Physical Address: 2
			no page fault. accessed frame #3
     				Virtual Address: 515 -> Physical Address: 1539
			no page fault. accessed frame #1
     				Virtual Address: 515 -> Physical Address: 515
     				Needed to write frame #2 to memory
			no page fault. accessed frame #2
     				Virtual Address: 515 -> Physical Address: 1027
			no page fault. accessed frame #0
     				Virtual Address: 516 -> Physical Address: 0
			Number of page faults: 6. Number of memory accesses: 8			

	LRU:(512B page size)

		101  102  103  104  101  102  105  101  102  103  104  105  102  103  104 
		 R    R    R    R    W    R    R    R    R    R    R    R    R    W    R

		101  101  101  101  101  101  1O1  101  101  101  101  105  105  105  105
		 x   102  102  102  102  102  102  102  102  102  102  102  102  102  102
		 x    x   103  103  103  103  105  105  105  105  104  104  104  104  104
		 x    x    x   104  104  104  104  104  104  103  103  103  103  103  103
   
   		 FD   FD   FD   FD   D         FD             FD   FD   FD        D    =	# of page faults   = 8
												# of disk accesses = 10
		
		Output:

			loaded page #1 of processes #101 to frame #0 with no replacement.
     				Virtual Address: 512 -> Physical Address: 0
			loaded page #1 of processes #102 to frame #1 with no replacement.
     				Virtual Address: 512 -> Physical Address: 512
			loaded page #1 of processes #103 to frame #2 with no replacement.
     				Virtual Address: 512 -> Physical Address: 1024
			loaded page #1 of processes #104 to frame #3 with no replacement.
    				Virtual Address: 512 -> Physical Address: 1536
     				Needed to write frame #0 to memory
			no page fault. accessed frame #0
     				Virtual Address: 513 -> Physical Address: 1
			no page fault. accessed frame #1
    				Virtual Address: 513 -> Physical Address: 513
			loaded page #1 of processes #105 to frame #2 with replacement.
     				Virtual Address: 513 -> Physical Address: 1025
			no page fault. accessed frame #0
     				Virtual Address: 514 -> Physical Address: 2
			no page fault. accessed frame #1
     				Virtual Address: 514 -> Physical Address: 514
			loaded page #1 of processes #103 to frame #3 with replacement.
     				Virtual Address: 514 -> Physical Address: 1538
			loaded page #1 of processes #104 to frame #2 with replacement.
     				Virtual Address: 514 -> Physical Address: 1026
			loaded page #1 of processes #105 to frame #0 with replacement.
     				Virtual Address: 515 -> Physical Address: 3
			no page fault. accessed frame #1
     				Virtual Address: 515 -> Physical Address: 515
     				Needed to write frame #3 to memory
			no page fault. accessed frame #3
     				Virtual Address: 515 -> Physical Address: 1539
			no page fault. accessed frame #2
     				Virtual Address: 516 -> Physical Address: 1024
			Number of page faults: 8. Number of memory accesses: 10

	ESCA:(512B page size)

		101  102  103  104  101  102  105  101  102  103  104  105  102  103  104 
		 R    R    R    R    W    R    R    R    R    R    R    R    R    W    R

		101  101  101  101  101  101  1O1  101  101  101  101  101  101  101  101
		 x   102  102  102  102  102  102  102  102  102  102  102  102  102  102
		 x    x   103  103  103  103  105  105  105  103  103  105  105  103  103
		 x    x    x   104  104  104  104  104  104  104  104  104  104  104  104
   
   		 FD   FD   FD   FD   D         FD             FD        FD       FDD    =	# of page faults   = 8
												# of disk accesses = 10
					
		Output:

			loaded page #1 of processes #101 to frame #0 with no replacement.
     				Virtual Address: 512 -> Physical Address: 0
			loaded page #1 of processes #102 to frame #1 with no replacement.
     				Virtual Address: 512 -> Physical Address: 512
			loaded page #1 of processes #103 to frame #2 with no replacement.
     				Virtual Address: 512 -> Physical Address: 1024
			loaded page #1 of processes #104 to frame #3 with no replacement.
     				Virtual Address: 512 -> Physical Address: 1536
     				Needed to write frame #0 to memory
			no page fault. accessed frame #0
     				Virtual Address: 513 -> Physical Address: 1
			no page fault. accessed frame #1
     				Virtual Address: 513 -> Physical Address: 513
			loaded page #1 of processes #105 to frame #2 with replacement.
     				Virtual Address: 513 -> Physical Address: 1025
			no page fault. accessed frame #0
     				Virtual Address: 514 -> Physical Address: 2
			no page fault. accessed frame #1
     				Virtual Address: 514 -> Physical Address: 514
			loaded page #1 of processes #103 to frame #2 with replacement.
     				Virtual Address: 514 -> Physical Address: 1026
			no page fault. accessed frame #3
     				Virtual Address: 514 -> Physical Address: 1538
			loaded page #1 of processes #105 to frame #2 with replacement.
     				Virtual Address: 515 -> Physical Address: 1027
			no page fault. accessed frame #1
     				Virtual Address: 515 -> Physical Address: 515
     				Needed to write frame #2 to memory
			loaded page #1 of processes #103 to frame #2 with replacement.
     				Virtual Address: 515 -> Physical Address: 1027
			no page fault. accessed frame #3
     				Virtual Address: 516 -> Physical Address: 1536
			Number of page faults: 8. Number of memory accesses: 10

	SCA:(512B page size)

		101  102  103  104  101  102  105  101  102  103  104  105  102  103  104 
		 R    R    R    R    W    R    R    R    R    R    R    R    R    W    R

		101  101  101  101  101  101  1O1  101  101  101  101  101  101  101  101
		 x   102  102  102  102  102  102  102  102  102  102  102  102  102  102
		 x    x   103  103  103  103  105  105  105  103  103  105  105  103  103
		 x    x    x   104  104  104  104  104  104  104  104  104  104  104  104
   
   		 FD   FD   FD   FD   D         FD             FD        FD       FDD    =	# of page faults   = 8
												# of disk accesses = 10
		
		Output:

			loaded page #1 of processes #101 to frame #0 with no replacement.
     				Virtual Address: 512 -> Physical Address: 0
			loaded page #1 of processes #102 to frame #1 with no replacement.
    				Virtual Address: 512 -> Physical Address: 512
			loaded page #1 of processes #103 to frame #2 with no replacement.
     				Virtual Address: 512 -> Physical Address: 1024
			loaded page #1 of processes #104 to frame #3 with no replacement.
     				Virtual Address: 512 -> Physical Address: 1536
     				Needed to write frame #0 to memory
			no page fault. accessed frame #0
     				Virtual Address: 513 -> Physical Address: 1
			no page fault. accessed frame #1
     				Virtual Address: 513 -> Physical Address: 513
			loaded page #1 of processes #105 to frame #2 with replacement.
     				Virtual Address: 513 -> Physical Address: 1025
			no page fault. accessed frame #0
     				Virtual Address: 514 -> Physical Address: 2
			no page fault. accessed frame #1
     				Virtual Address: 514 -> Physical Address: 514
			loaded page #1 of processes #103 to frame #2 with replacement.
     				Virtual Address: 514 -> Physical Address: 1026
			no page fault. accessed frame #3
     				Virtual Address: 514 -> Physical Address: 1538
			loaded page #1 of processes #105 to frame #2 with replacement.
     				Virtual Address: 515 -> Physical Address: 1027
			no page fault. accessed frame #1
     				Virtual Address: 515 -> Physical Address: 515
     				Needed to write frame #2 to memory
			loaded page #1 of processes #103 to frame #2 with replacement.
     				Virtual Address: 515 -> Physical Address: 1027
			no page fault. accessed frame #3
     				Virtual Address: 516 -> Physical Address: 1536
			Number of page faults: 8. Number of memory accesses: 10

Analysis Results - Using a larger input file (), show a table which compares the results of all different page replacement algorithms.  When generating larger files try to be thoughtful of how you generate them (perhaps use the ideas of working sets).

	*(512B page size)

	Page Size	Algorithm	Page Faults	Memory Accesses		Ranking

	32B		OPRA		19		25

	64B		OPRA		19		25
	
	256B		OPRA		19		19

	512B		OPRA		23		29			1

	32B		FIFO		19		25

	64B		FIFO		19		25
	
	256B		FIFO		19		25

	512B		FIFO		33		39			4

	32B		LRU 		19		25

	64B		LRU		19		25
	
	256B		LRU		19		25
	
	512B		LRU		30		36			2

	32B		SCA 		19		25

	64B		SCA		19		25
	
	256B		SCA		38		44

	512B		SCA		43		49			5

	32B		ESCA 

	64B		ESCA
	
	256B		ESCA

	512B		ESCA		44		50			6

	32B		HYBRID 

	64B		HYBRID
	
	256B		HYBRID

	512B		HYBRID		33		39			3

Conclusion - Which algorithms worked the best and in what cases.

	

An appendix describing which part of the project each team member was in charge of.

	Manny - Skeleton of the program/design
	Manny - FIFO and HYBRID scheduling algorithms, code and report analysis
	Manny - Analysis Results
	Manny - Conclusion

	Conrad - OPRA, LRU, SCA, and ESCA scheduling algorithms, code and report analysis
	Conrad - Complete and in depth description of how each algorithm works
	Conrad - Introduction

References - If necessary.

	The results for the large input file are attached in the same folder.
